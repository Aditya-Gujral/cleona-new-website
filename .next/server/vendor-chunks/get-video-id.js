"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-video-id";
exports.ids = ["vendor-chunks/get-video-id"];
exports.modules = {

/***/ "(rsc)/./node_modules/get-video-id/dist/get-video-id.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/get-video-id/dist/get-video-id.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*! get-video-id v3.7.0 | @license MIT Â© Michael Wuergler | https://github.com/radiovisual/get-video-id */\n/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n  // Split parameters or split folder separator\n  if (shortcodeString.includes('?')) {\n    shortcodeString = shortcodeString.split('?')[0];\n  }\n\n  if (shortcodeString.includes('/')) {\n    shortcodeString = shortcodeString.split('/')[0];\n  }\n\n  if (shortcodeString.includes('&')) {\n    shortcodeString = shortcodeString.split('&')[0];\n  }\n\n  return shortcodeString;\n}\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction youtube(youtubeString) {\n  var string_ = youtubeString; // Remove time hash at the end of the string\n\n  string_ = string_.replace(/#t=.*$/, ''); // Strip the leading protocol\n\n  string_ = string_.replace(/^https?:\\/\\//, ''); // Shortcode\n\n  var shortcode = /youtube:\\/\\/|youtu\\.be\\/|y2u\\.be\\//g;\n\n  if (shortcode.test(string_)) {\n    var shortcodeid = string_.split(shortcode)[1];\n    return stripParameters(shortcodeid);\n  } // Shorts\n\n\n  var shortsUrl = /\\/shorts\\//g;\n\n  if (shortsUrl.test(string_)) {\n    return stripParameters(string_.split(shortsUrl)[1]);\n  } // V= or vi=\n\n\n  var parameterv = /v=|vi=/g;\n\n  if (parameterv.test(string_)) {\n    var array = string_.split(parameterv);\n    return stripParameters(array[1].split('&')[0]);\n  } // /v/ or /vi/ or /watch/\n\n\n  var inlinev = /\\/v\\/|\\/vi\\/|\\/watch\\//g;\n\n  if (inlinev.test(string_)) {\n    var inlineid = string_.split(inlinev)[1];\n    return stripParameters(inlineid);\n  } // Format an_webp\n\n\n  var parameterwebp = /\\/an_webp\\//g;\n\n  if (parameterwebp.test(string_)) {\n    var webp = string_.split(parameterwebp)[1];\n    return stripParameters(webp);\n  } // /e/\n\n\n  var eformat = /\\/e\\//g;\n\n  if (eformat.test(string_)) {\n    var estring = string_.split(eformat)[1];\n    return stripParameters(estring);\n  } // Embed\n\n\n  var embedreg = /\\/embed\\//g;\n\n  if (embedreg.test(string_)) {\n    var embedid = string_.split(embedreg)[1];\n    return stripParameters(embedid);\n  } // ignore /user/username pattern\n\n\n  var usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n  if (usernamereg.test(string_)) {\n    return undefined;\n  } // User\n\n\n  var userreg = /\\/user\\/(?!.*videos)/g;\n\n  if (userreg.test(string_)) {\n    var elements = string_.split('/');\n    return stripParameters(elements.pop());\n  } // Attribution_link\n\n\n  var attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n  if (attrreg.test(string_)) {\n    return stripParameters(string_.match(attrreg)[1]);\n  } // Live\n\n\n  var livereg = /\\/live\\//g;\n\n  if (livereg.test(string_)) {\n    var liveid = string_.split(livereg)[1];\n    return stripParameters(liveid);\n  }\n\n  return undefined;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\nfunction vimeo(vimeoString) {\n  var string_ = vimeoString;\n\n  if (string_.includes('#')) {\n    var _string_$split = string_.split('#');\n\n    var _string_$split2 = _slicedToArray(_string_$split, 1);\n\n    string_ = _string_$split2[0];\n  }\n\n  if (string_.includes('?') && !string_.includes('clip_id=')) {\n    var _string_$split3 = string_.split('?');\n\n    var _string_$split4 = _slicedToArray(_string_$split3, 1);\n\n    string_ = _string_$split4[0];\n  }\n\n  var id;\n  var array;\n  var event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n  var eventMatches = event.exec(string_);\n\n  if (eventMatches && eventMatches[1]) {\n    return eventMatches[1];\n  }\n\n  var primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n  var matches = primary.exec(string_);\n\n  if (matches && matches[1]) {\n    return matches[1];\n  }\n\n  var vimeoPipe = ['https?://player.vimeo.com/video/[0-9]+$', 'https?://vimeo.com/channels', 'groups', 'album'].join('|');\n  var vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n  if (vimeoRegex.test(string_)) {\n    array = string_.split('/');\n\n    if (array && array.length > 0) {\n      id = array.pop();\n    }\n  } else if (/clip_id=/gim.test(string_)) {\n    array = string_.split('clip_id=');\n\n    if (array && array.length > 0) {\n      var _array$1$split = array[1].split('&');\n\n      var _array$1$split2 = _slicedToArray(_array$1$split, 1);\n\n      id = _array$1$split2[0];\n    }\n  }\n\n  return id;\n}\n\n/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nfunction vine(string_) {\n  var regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n  var matches = regex.exec(string_);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n\n/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nfunction videopress(urlString) {\n  var idRegex;\n\n  if (urlString.includes('embed')) {\n    idRegex = /embed\\/(\\w{8})/;\n    return urlString.match(idRegex)[1];\n  }\n\n  idRegex = /\\/v\\/(\\w{8})/;\n  var matches = urlString.match(idRegex);\n\n  if (matches && matches.length > 0) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n\n/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nfunction microsoftStream(urlString) {\n  var regex = urlString.includes('embed') ? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/ : /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n  var matches = regex.exec(urlString);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n\n/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nfunction tiktok(urlString) {\n  // Parse basic url and embeds\n  var basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n  var basicParsed = basicReg.exec(urlString);\n\n  if (basicParsed && basicParsed.length > 2) {\n    return basicParsed[2];\n  }\n\n  return undefined;\n}\n\n/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nfunction dailymotion(urlString) {\n  // Parse basic url and embeds\n  var basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n  var basicParsed = basicReg.exec(urlString);\n\n  if (basicParsed) {\n    return basicParsed[3];\n  } // Parse shortlink\n\n\n  var shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n  var shortParsed = shortRegex.exec(urlString);\n\n  if (shortParsed && shortParsed.length > 1) {\n    return shortParsed[1];\n  } // Dynamic link\n\n\n  var dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n  var dynamicParsed = dynamicRegex.exec(urlString);\n\n  if (dynamicParsed && dynamicParsed.length > 2) {\n    return dynamicParsed[2];\n  }\n\n  return undefined;\n}\n\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\nfunction getSrc(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('getSrc expected a string');\n  }\n\n  var srcRegEx = /src=\"(.*?)\"/gm;\n  var matches = srcRegEx.exec(input);\n\n  if (matches && matches.length >= 2) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\n\nfunction getVideoId(urlString) {\n  if (typeof urlString !== 'string') {\n    throw new TypeError('get-video-id expects a string');\n  }\n\n  var string_ = urlString;\n\n  if (/<iframe/gi.test(string_)) {\n    string_ = getSrc(string_) || '';\n  } // Remove surrounding whitespaces or linefeeds\n\n\n  string_ = string_.trim(); // Remove the '-nocookie' flag from youtube urls\n\n  string_ = string_.replace('-nocookie', ''); // Remove any leading `www.`\n\n  string_ = string_.replace('/www.', '/');\n  var metadata = {\n    id: null,\n    service: null\n  }; // Try to handle google redirection uri\n\n  if (/\\/\\/google/.test(string_)) {\n    // Find the redirection uri\n    var matches = string_.match(/url=([^&]+)&/); // Decode the found uri and replace current url string - continue with final link\n\n    if (matches) {\n      // JavaScript can get encoded URI\n      string_ = decodeURIComponent(matches[1]);\n    }\n  }\n\n  if (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n    metadata = {\n      id: youtube(string_),\n      service: 'youtube'\n    };\n  } else if (/vimeo/.test(string_)) {\n    metadata = {\n      id: vimeo(string_),\n      service: 'vimeo'\n    };\n  } else if (/vine/.test(string_)) {\n    metadata = {\n      id: vine(string_),\n      service: 'vine'\n    };\n  } else if (/videopress/.test(string_)) {\n    metadata = {\n      id: videopress(string_),\n      service: 'videopress'\n    };\n  } else if (/microsoftstream/.test(string_)) {\n    metadata = {\n      id: microsoftStream(string_),\n      service: 'microsoftstream'\n    };\n  } else if (/tiktok\\.com/.test(string_)) {\n    metadata = {\n      id: tiktok(string_),\n      service: 'tiktok'\n    };\n  } else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n    metadata = {\n      id: dailymotion(string_),\n      service: 'dailymotion'\n    };\n  }\n\n  return metadata;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getVideoId);\n//# sourceMappingURL=get-video-id.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-video-id/dist/get-video-id.esm.js\n");

/***/ })

};
;